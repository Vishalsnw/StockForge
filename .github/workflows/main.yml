name: 🏦 StockForge Auto-Fix Duplicates

on:
  workflow_dispatch:
    inputs:
      fix_type:
        description: 'Type of fix to apply'
        required: true
        default: 'remove_duplicates'
        type: choice
        options:
          - remove_duplicates
          - update_timestamps
          - full_cleanup
      user_name:
        description: 'Target User (default: Vishalsnw)'
        required: false
        default: 'Vishalsnw'
        type: string

  push:
    branches: [main]
    paths:
      - 'frontend/src/hooks/useBotMarket.js'
      - 'src/hooks/useBotMarket.js'

  workflow_run:
    workflows: ["Vercel Production Deployment"]
    types: [completed]

jobs:
  auto-fix-duplicates:
    name: 🔧 Fix Duplicate Declarations
    runs-on: ubuntu-latest

    steps:
      - name: 📅 Display Current Info
        run: |
          echo "🏦 STOCKFORGE AUTO-FIX WORKFLOW"
          echo "👤 User: ${{ github.event.inputs.user_name != '' && github.event.inputs.user_name || 'Vishalsnw' }}"
          echo "📅 UTC Time: 2025-06-12 13:33:30"
          echo "🎯 Fix Type: ${{ github.event.inputs.fix_type != '' && github.event.inputs.fix_type || 'remove_duplicates' }}"
          echo "🚀 Workflow: auto-fix-duplicates"
          echo "=================================================="

      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🔍 Detect Package Structure
        id: detect-structure
        run: |
          echo "🔍 Analyzing project structure..."
          if [ -f "frontend/package.json" ]; then
            echo "📦 Found: frontend/package.json"
            echo "project_type=frontend" >> $GITHUB_OUTPUT
            echo "package_path=frontend" >> $GITHUB_OUTPUT
            echo "has_package_json=true" >> $GITHUB_OUTPUT
            if [ -f "frontend/package-lock.json" ]; then
              echo "🔒 Found: frontend/package-lock.json"
              echo "has_lockfile=true" >> $GITHUB_OUTPUT
              echo "lockfile_path=frontend/package-lock.json" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Missing: frontend/package-lock.json"
              echo "has_lockfile=false" >> $GITHUB_OUTPUT
            fi
          elif [ -f "package.json" ]; then
            echo "📦 Found: package.json (root)"
            echo "project_type=root" >> $GITHUB_OUTPUT
            echo "package_path=." >> $GITHUB_OUTPUT
            echo "has_package_json=true" >> $GITHUB_OUTPUT
            if [ -f "package-lock.json" ]; then
              echo "🔒 Found: package-lock.json (root)"
              echo "has_lockfile=true" >> $GITHUB_OUTPUT
              echo "lockfile_path=package-lock.json" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Missing: package-lock.json (root)"
              echo "has_lockfile=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ No package.json found!"
            echo "project_type=none" >> $GITHUB_OUTPUT
            echo "has_package_json=false" >> $GITHUB_OUTPUT
            echo "has_lockfile=false" >> $GITHUB_OUTPUT
          fi

      - name: 🛠️ Setup Node.js (With Cache)
       
