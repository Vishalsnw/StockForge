name: StockForge Auto-Fix Duplicates

on:
  workflow_dispatch:
    inputs:
      fix_type:
        description: Type of fix to apply
        required: true
        default: remove_duplicates
        type: choice
        options:
          - remove_duplicates
          - update_timestamps
          - full_cleanup
      user_name:
        description: Target User
        required: false
        default: Vishalsnw
        type: string
      
  push:
    branches: 
      - main
    paths: 
      - frontend/src/hooks/useBotMarket.js
      - src/hooks/useBotMarket.js

jobs:
  auto-fix-duplicates:
    name: Fix Duplicate Declarations
    runs-on: ubuntu-latest
    
    steps:
      - name: Display Info
        run: |
          echo "StockForge Auto-Fix Workflow"
          echo "Current UTC Time: 2025-06-12 14:12:58"
          echo "User: ${{ inputs.user_name || 'Vishalsnw' }}"
          echo "Fix Type: ${{ inputs.fix_type || 'remove_duplicates' }}"

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Detect Target File
        id: detect-file
        run: |
          if [ -f "frontend/src/hooks/useBotMarket.js" ]; then
            echo "target_file=frontend/src/hooks/useBotMarket.js" >> $GITHUB_OUTPUT
            echo "Target: frontend/src/hooks/useBotMarket.js"
          elif [ -f "src/hooks/useBotMarket.js" ]; then
            echo "target_file=src/hooks/useBotMarket.js" >> $GITHUB_OUTPUT
            echo "Target: src/hooks/useBotMarket.js"
          else
            echo "ERROR: useBotMarket.js not found!"
            exit 1
          fi

      - name: Smart Duplicate Analysis
        id: analyze
        run: |
          TARGET_FILE="${{ steps.detect-file.outputs.target_file }}"
          echo "Smart analysis of duplicates in $TARGET_FILE"
          
          if [ ! -f "$TARGET_FILE" ]; then
            echo "File not found: $TARGET_FILE"
            exit 1
          fi
          
          echo "All currentUser declarations with context:"
          grep -n -A2 -B2 "const currentUser =" "$TARGET_FILE" || echo "No currentUser found"
          
          echo ""
          echo "Analyzing specific patterns..."
          
          # Look for the problematic duplicate patterns (our added ones)
          DUPLICATE_VISHALSNW=$(grep -c "const currentUser = 'Vishalsnw';" "$TARGET_FILE" || echo "0")
          DUPLICATE_DATETIME=$(grep -c "const currentDateTimeUTC = '2025-" "$TARGET_FILE" || echo "0")
          DUPLICATE_BLOCKS=$(grep -c "// ===== CURRENT INFO (Updated) =====" "$TARGET_FILE" || echo "0")
          
          # Look for original declarations
          ORIGINAL_CURRENT_USER=$(grep -c "const currentUser = CURRENT_USER;" "$TARGET_FILE" || echo "0")
          
          echo "ANALYSIS RESULTS:"
          echo "Original currentUser (CURRENT_USER): $ORIGINAL_CURRENT_USER"
          echo "Duplicate currentUser (Vishalsnw): $DUPLICATE_VISHALSNW"
          echo "Duplicate currentDateTimeUTC: $DUPLICATE_DATETIME"
          echo "Duplicate comment blocks: $DUPLICATE_BLOCKS"
          
          # Calculate actual duplicates (our additions only)
          ACTUAL_DUPLICATES=$((DUPLICATE_VISHALSNW + DUPLICATE_DATETIME + DUPLICATE_BLOCKS))
          
          echo "total_duplicates=$ACTUAL_DUPLICATES" >> $GITHUB_OUTPUT
          
          if [ $ACTUAL_DUPLICATES -gt 0 ]; then
            echo "needs_fix=true" >> $GITHUB_OUTPUT
            echo "$ACTUAL_DUPLICATES actual duplicates (our additions) found - FIX NEEDED"
          else
            echo "needs_fix=false" >> $GITHUB_OUTPUT
            echo "No actual duplicates found - File is clean"
          fi

      - name: Create Smart Fix Script
        if: steps.analyze.outputs.needs_fix == 'true'
        run: |
          cat > smart_fix.sh << 'BASH_END'
          #!/bin/bash
          
          TARGET_FILE="$1"
          
          if [ -z "$TARGET_FILE" ]; then
              echo "ERROR: No file path provided"
              exit 1
          fi
          
          if [ ! -f "$TARGET_FILE" ]; then
              echo "ERROR: File not found: $TARGET_FILE"
              exit 1
          fi
          
          echo "Starting smart fix for: $TARGET_FILE"
          echo "UTC Time: 2025-06-12 14:12:58"
          echo "User: Vishalsnw"
          
          # Create backup
          cp "$TARGET_FILE" "${TARGET_FILE}.backup-$(date +%s)"
          echo "Backup created"
          
          echo "BEFORE FIX:"
          echo "All currentUser lines:"
          grep -n "const currentUser =" "$TARGET_FILE"
          
          # Strategy: Remove only OUR duplicate additions, not original code
          # Remove lines that contain our specific patterns
          
          echo "Removing our duplicate additions..."
          
          # Remove commented duplicate lines first
          sed -i '/\/\/ REMOVED DUPLICATE:.*const currentUser/d' "$TARGET_FILE"
          sed -i '/\/\/ REMOVED DUPLICATE:.*const currentDateTimeUTC/d' "$TARGET_FILE"
          sed -i '/\/\/ REMOVED DUPLICATE:.*const currentDate/d' "$TARGET_FILE"
          sed -i '/\/\/ REMOVED DUPLICATE:.*const currentTime/d' "$TARGET_FILE"
          
          # Remove our specific duplicate blocks (not original code)
          # Look for blocks that contain 'Vishalsnw' specifically
          
          # Method 1: Remove blocks with our timestamp patterns
          awk '
          BEGIN { in_duplicate_block = 0; block_lines = 0; }
          
          /\/\/ ===== CURRENT INFO \(Updated\) =====/ {
              # Start of potential duplicate block
              in_duplicate_block = 1;
              block_lines = 0;
              block_start = NR;
              next;
          }
          
          in_duplicate_block == 1 {
              block_lines++;
              if (/const currentUser = .Vishalsnw.;/ || /const currentDateTimeUTC = .2025-/) {
                  # This is our duplicate block, skip it
                  if (block_lines >= 4) {
                      in_duplicate_block = 0;
                  }
                  next;
              } else if (block_lines >= 6) {
                  # Not our block, print previous lines and continue normally
                  in_duplicate_block = 0;
                  print;
              } else {
                  next;
              }
          }
          
          { print; }
          ' "$TARGET_FILE" > "${TARGET_FILE}.temp"
          
          mv "${TARGET_FILE}.temp" "$TARGET_FILE"
          
          # Method 2: Remove any remaining standalone duplicates with our patterns
          # Remove lines that contain exactly our patterns (not the original CURRENT_USER)
          sed -i "/const currentUser = 'Vishalsnw';/d" "$TARGET_FILE"
          sed -i "/const currentDateTimeUTC = '2025-/d" "$TARGET_FILE"
          sed -i "/const currentDate = '2025-/d" "$TARGET_FILE"
          sed -i "/const currentTime = '[0-9][0-9]:[0-9][0-9]:[0-9][0-9]';/d" "$TARGET_FILE"
          
          # Remove empty comment blocks
          sed -i '/\/\/ ===== CURRENT INFO (Updated) =====/,+1 {
              /\/\/ ===== CURRENT INFO (Updated) =====/d
              /^[[:space:]]*$/d
          }' "$TARGET_FILE"
          
          echo "AFTER FIX:"
          echo "All currentUser lines:"
          grep -n "const currentUser =" "$TARGET_FILE" || echo "No currentUser lines found"
          
          echo "All currentDateTimeUTC lines:"
          grep -n "const currentDateTimeUTC =" "$TARGET_FILE" || echo "No currentDateTimeUTC lines found"
          
          # Final verification
          USER_COUNT=$(grep -c "const currentUser =" "$TARGET_FILE" || echo "0")
          DATETIME_COUNT=$(grep -c "const currentDateTimeUTC =" "$TARGET_FILE" || echo "0")
          
          echo "FINAL COUNTS:"
          echo "currentUser declarations: $USER_COUNT"
          echo "currentDateTimeUTC declarations: $DATETIME_COUNT"
          
          # Success criteria: should have exactly 1 currentUser (the original)
          if [ $USER_COUNT -eq 1 ]; then
              echo "SUCCESS: Correct number of currentUser declarations"
              echo "Remaining currentUser line:"
              grep -n "const currentUser =" "$TARGET_FILE"
              exit 0
          else
              echo "WARNING: Unexpected number of currentUser declarations: $USER_COUNT"
              if [ $USER_COUNT -eq 0 ]; then
                  echo "ERROR: Removed original currentUser declaration!"
                  exit 1
              else
                  echo "INFO: May still have duplicates, but proceeding"
                  exit 0
              fi
          fi
          BASH_END
          
          chmod +x smart_fix.sh
          echo "Smart fix script created"

      - name: Execute Smart Fix
        if: steps.analyze.outputs.needs_fix == 'true'
        run: |
          TARGET_FILE="${{ steps.detect-file.outputs.target_file }}"
          echo "Executing smart fix on $TARGET_FILE"
          
          if ./smart_fix.sh "$TARGET_FILE"; then
            echo "Smart fix completed successfully"
          else
            echo "Smart fix had issues, checking results..."
            
            # Check current state
            USER_COUNT=$(grep -c "const currentUser =" "$TARGET_FILE" || echo "0")
            echo "Current currentUser count: $USER_COUNT"
            
            if [ $USER_COUNT -eq 1 ]; then
              echo "Fix successful despite warnings"
            else
              echo "Manual cleanup needed"
              # Try one more aggressive cleanup
              sed -i '/const currentUser.*Vishalsnw/d' "$TARGET_FILE"
              sed -i '/const currentDateTimeUTC.*2025-/d' "$TARGET_FILE"
              echo "Applied additional cleanup"
            fi
          fi

      - name: Verify Fix and Test Build
        if: steps.analyze.outputs.needs_fix == 'true'
        run: |
          TARGET_FILE="${{ steps.detect-file.outputs.target_file }}"
          
          echo "FINAL VERIFICATION:"
          echo "==================="
          
          # Show final state
          echo "Final currentUser declarations:"
          grep -n -B1 -A1 "const currentUser =" "$TARGET_FILE" || echo "No currentUser found"
          
          USER_COUNT=$(grep -c "const currentUser =" "$TARGET_FILE" || echo "0")
          echo "Final count: $USER_COUNT currentUser declarations"
          
          # Test build
          echo "Testing build..."
          cd frontend
          npm install
          
          if npm run build; then
            echo "BUILD SUCCESS: All duplicate errors resolved!"
          else
            echo "BUILD FAILED: Need to check for remaining issues"
            
            # Show any remaining duplicate errors
            echo "Checking for JavaScript errors..."
            npm run build 2>&1 | grep -i "already been declared" || echo "No duplicate declaration errors found"
            
            exit 1
          fi

      - name: Commit Changes
        if: steps.analyze.outputs.needs_fix == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "StockForge-Bot"
          
          git add .
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "SMART FIX: Remove only duplicate additions (not original code) - Vishalsnw - 2025-06-12 14:12:58"
            git push
            echo "Smart fix committed and pushed"
          fi

      - name: Success Summary
        if: steps.analyze.outputs.needs_fix == 'true'
        run: |
          echo "SMART FIX COMPLETED"
          echo "=================="
          echo "User: Vishalsnw"
          echo "UTC Time: 2025-06-12 14:12:58"
          echo "Target: ${{ steps.detect-file.outputs.target_file }}"
          echo "Strategy: Remove only our duplicate additions, preserve original code"
          echo "Build test: PASSED"
          echo "Ready for Vercel deployment"

      - name: No Fix Needed
        if: steps.analyze.outputs.needs_fix == 'false'
        run: |
          echo "No actual duplicates found"
          echo "Original code is preserved"
          echo "User: Vishalsnw"
          echo "UTC Time: 2025-06-12 14:12:58"
