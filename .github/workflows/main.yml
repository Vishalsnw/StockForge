name: StockForge Auto-Fix Duplicates

on:
  workflow_dispatch:
    inputs:
      fix_type:
        description: Type of fix to apply
        required: true
        default: remove_duplicates
        type: choice
        options:
          - remove_duplicates
          - update_timestamps
          - full_cleanup
      user_name:
        description: Target User
        required: false
        default: Vishalsnw
        type: string
      
  push:
    branches: 
      - main
    paths: 
      - frontend/src/hooks/useBotMarket.js
      - src/hooks/useBotMarket.js

jobs:
  auto-fix-duplicates:
    name: Fix Duplicate Declarations
    runs-on: ubuntu-latest
    
    steps:
      - name: Display Info
        run: |
          echo "StockForge Auto-Fix Workflow"
          echo "User: ${{ inputs.user_name || 'Vishalsnw' }}"
          echo "Fix Type: ${{ inputs.fix_type || 'remove_duplicates' }}"

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Detect Target File
        id: detect-file
        run: |
          if [ -f "frontend/src/hooks/useBotMarket.js" ]; then
            echo "target_file=frontend/src/hooks/useBotMarket.js" >> $GITHUB_OUTPUT
            echo "Target: frontend/src/hooks/useBotMarket.js"
          elif [ -f "src/hooks/useBotMarket.js" ]; then
            echo "target_file=src/hooks/useBotMarket.js" >> $GITHUB_OUTPUT
            echo "Target: src/hooks/useBotMarket.js"
          else
            echo "ERROR: useBotMarket.js not found!"
            exit 1
          fi

      - name: Analyze Duplicates
        id: analyze
        run: |
          TARGET_FILE="${{ steps.detect-file.outputs.target_file }}"
          echo "Analyzing duplicates in $TARGET_FILE"
          
          if [ ! -f "$TARGET_FILE" ]; then
            echo "File not found: $TARGET_FILE"
            exit 1
          fi
          
          USER_COUNT=$(grep -c "const currentUser =" "$TARGET_FILE" || echo "0")
          DATETIME_COUNT=$(grep -c "const currentDateTimeUTC =" "$TARGET_FILE" || echo "0")
          DATE_COUNT=$(grep -c "const currentDate =" "$TARGET_FILE" || echo "0")
          TIME_COUNT=$(grep -c "const currentTime =" "$TARGET_FILE" || echo "0")
          
          echo "currentUser: $USER_COUNT declarations"
          echo "currentDateTimeUTC: $DATETIME_COUNT declarations"
          echo "currentDate: $DATE_COUNT declarations"
          echo "currentTime: $TIME_COUNT declarations"
          
          TOTAL_FOUND=$((USER_COUNT + DATETIME_COUNT + DATE_COUNT + TIME_COUNT))
          TOTAL_DUPLICATES=$((TOTAL_FOUND - 4))
          
          echo "total_duplicates=$TOTAL_DUPLICATES" >> $GITHUB_OUTPUT
          
          if [ $TOTAL_DUPLICATES -gt 0 ]; then
            echo "needs_fix=true" >> $GITHUB_OUTPUT
            echo "$TOTAL_DUPLICATES duplicates found - FIX NEEDED"
          else
            echo "needs_fix=false" >> $GITHUB_OUTPUT
            echo "No duplicates found - File is clean"
          fi

      - name: Create Fix Script (CommonJS)
        if: steps.analyze.outputs.needs_fix == 'true'
        run: |
          cat > fix_script.cjs << 'SCRIPT_END'
          const fs = require('fs');
          
          function fixDuplicates(filePath) {
              console.log('Starting auto-fix for:', filePath);
              
              try {
                  let content = fs.readFileSync(filePath, 'utf8');
                  console.log('File loaded, size:', content.length);
                  
                  const variables = ['currentUser', 'currentDateTimeUTC', 'currentDate', 'currentTime'];
                  
                  console.log('Analyzing duplicates...');
                  variables.forEach(varName => {
                      const pattern = new RegExp('const ' + varName + ' =', 'g');
                      const matches = content.match(pattern) || [];
                      console.log(varName + ':', matches.length, 'declarations');
                  });
                  
                  console.log('Removing duplicate blocks...');
                  
                  const blockPattern = /\s*\/\/ ===== CURRENT INFO \(Updated\) =====\s*\n\s*const currentUser = '[^']*';\s*\n\s*const currentDateTimeUTC = '[^']*';\s*\n\s*const currentDate = '[^']*';\s*\n(?:\s*const currentTime = '[^']*';\s*\n)?/g;
                  
                  const blockMatches = [...content.matchAll(blockPattern)];
                  console.log('Found', blockMatches.length, 'duplicate blocks');
                  
                  if (blockMatches.length > 1) {
                      for (let i = blockMatches.length - 1; i > 0; i--) {
                          const match = blockMatches[i];
                          const start = match.index;
                          const end = start + match[0].length;
                          content = content.slice(0, start) + content.slice(end);
                          console.log('Removed duplicate block', i + 1);
                      }
                  }
                  
                  variables.forEach(varName => {
                      const pattern = new RegExp('\\n\\s*const ' + varName + ' = \'[^\']*\';', 'g');
                      const matches = [...content.matchAll(pattern)];
                      
                      if (matches.length > 1) {
                          console.log('Removing', matches.length - 1, 'standalone', varName, 'duplicates');
                          for (let i = matches.length - 1; i > 0; i--) {
                              const match = matches[i];
                              const start = match.index;
                              const end = start + match[0].length;
                              content = content.slice(0, start) + content.slice(end);
                          }
                      }
                  });
                  
                  console.log('Updating user info...');
                  content = content.replace(/const currentUser = '[^']*';/, "const currentUser = 'Vishalsnw';");
                  
                  fs.writeFileSync(filePath, content, 'utf8');
                  console.log('File updated successfully');
                  
                  console.log('Verifying fix...');
                  variables.forEach(varName => {
                      const pattern = new RegExp('const ' + varName + ' =', 'g');
                      const matches = content.match(pattern) || [];
                      const status = matches.length === 1 ? 'OK' : 'ERROR';
                      console.log(status, varName + ':', matches.length, 'declarations');
                  });
                  
                  console.log('SUCCESS: Duplicates removed');
                  return true;
                  
              } catch (error) {
                  console.log('ERROR:', error.message);
                  return false;
              }
          }
          
          const filePath = process.argv[2];
          if (!filePath) {
              console.log('ERROR: No file path provided');
              process.exit(1);
          }
          
          const success = fixDuplicates(filePath);
          process.exit(success ? 0 : 1);
          SCRIPT_END
          
          echo "CommonJS fix script created"

      - name: Create Alternative Bash Fix Script
        if: steps.analyze.outputs.needs_fix == 'true'
        run: |
          cat > fix_script.sh << 'BASH_END'
          #!/bin/bash
          
          TARGET_FILE="$1"
          
          if [ -z "$TARGET_FILE" ]; then
              echo "ERROR: No file path provided"
              exit 1
          fi
          
          if [ ! -f "$TARGET_FILE" ]; then
              echo "ERROR: File not found: $TARGET_FILE"
              exit 1
          fi
          
          echo "Starting bash-based fix for: $TARGET_FILE"
          
          # Create backup
          cp "$TARGET_FILE" "${TARGET_FILE}.backup"
          echo "Backup created: ${TARGET_FILE}.backup"
          
          # Count duplicates before
          USER_COUNT=$(grep -c "const currentUser =" "$TARGET_FILE")
          DATETIME_COUNT=$(grep -c "const currentDateTimeUTC =" "$TARGET_FILE")
          DATE_COUNT=$(grep -c "const currentDate =" "$TARGET_FILE")
          TIME_COUNT=$(grep -c "const currentTime =" "$TARGET_FILE")
          
          echo "Before fix:"
          echo "  currentUser: $USER_COUNT declarations"
          echo "  currentDateTimeUTC: $DATETIME_COUNT declarations"
          echo "  currentDate: $DATE_COUNT declarations"
          echo "  currentTime: $TIME_COUNT declarations"
          
          # Remove duplicate lines (keep only first occurrence)
          echo "Removing duplicates..."
          
          # Use awk to remove duplicate const declarations
          awk '
          /const currentUser =/ { if (!seen_user) { print; seen_user=1 } next }
          /const currentDateTimeUTC =/ { if (!seen_datetime) { print; seen_datetime=1 } next }
          /const currentDate =/ { if (!seen_date) { print; seen_date=1 } next }
          /const currentTime =/ { if (!seen_time) { print; seen_time=1 } next }
          { print }
          ' "$TARGET_FILE" > "${TARGET_FILE}.tmp"
          
          # Move temp file back
          mv "${TARGET_FILE}.tmp" "$TARGET_FILE"
          
          # Update currentUser to Vishalsnw
          sed -i "s/const currentUser = '[^']*';/const currentUser = 'Vishalsnw';/" "$TARGET_FILE"
          
          # Count after fix
          USER_COUNT_AFTER=$(grep -c "const currentUser =" "$TARGET_FILE")
          DATETIME_COUNT_AFTER=$(grep -c "const currentDateTimeUTC =" "$TARGET_FILE")
          DATE_COUNT_AFTER=$(grep -c "const currentDate =" "$TARGET_FILE")
          TIME_COUNT_AFTER=$(grep -c "const currentTime =" "$TARGET_FILE")
          
          echo "After fix:"
          echo "  currentUser: $USER_COUNT_AFTER declarations"
          echo "  currentDateTimeUTC: $DATETIME_COUNT_AFTER declarations"
          echo "  currentDate: $DATE_COUNT_AFTER declarations"
          echo "  currentTime: $TIME_COUNT_AFTER declarations"
          
          if [ $USER_COUNT_AFTER -eq 1 ] && [ $DATETIME_COUNT_AFTER -eq 1 ] && [ $DATE_COUNT_AFTER -eq 1 ] && [ $TIME_COUNT_AFTER -eq 1 ]; then
              echo "SUCCESS: All duplicates removed"
              exit 0
          else
              echo "ERROR: Some duplicates may remain"
              exit 1
          fi
          BASH_END
          
          chmod +x fix_script.sh
          echo "Bash fix script created"

      - name: Execute Fix (Try CommonJS first, then Bash)
        if: steps.analyze.outputs.needs_fix == 'true'
        run: |
          TARGET_FILE="${{ steps.detect-file.outputs.target_file }}"
          echo "Executing fix on $TARGET_FILE"
          
          # Try CommonJS version first
          if node fix_script.cjs "$TARGET_FILE"; then
            echo "CommonJS fix completed successfully"
          else
            echo "CommonJS fix failed, trying bash version..."
            if ./fix_script.sh "$TARGET_FILE"; then
              echo "Bash fix completed successfully"
            else
              echo "Both fixes failed"
              exit 1
            fi
          fi

      - name: Install Dependencies
        if: steps.analyze.outputs.needs_fix == 'true'
        run: |
          if [ -f "frontend/package.json" ]; then
            cd frontend
            npm install || echo "npm install completed with warnings"
          elif [ -f "package.json" ]; then
            npm install || echo "npm install completed with warnings"
          fi

      - name: Test Build
        if: steps.analyze.outputs.needs_fix == 'true'
        run: |
          echo "Testing build after fix"
          if [ -f "frontend/package.json" ]; then
            cd frontend
            npm run build || echo "Build test completed"
          elif [ -f "package.json" ]; then
            npm run build || echo "Build test completed"
          fi

      - name: Commit Changes
        if: steps.analyze.outputs.needs_fix == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "StockForge-Bot"
          
          git add .
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-fix: Remove duplicate declarations for Vishalsnw - 2025-06-12 14:02:04"
            git push
            echo "Changes committed and pushed"
          fi

      - name: Success Summary
        if: steps.analyze.outputs.needs_fix == 'true'
        run: |
          echo "Auto-fix completed successfully"
          echo "User: Vishalsnw"
          echo "Target: ${{ steps.detect-file.outputs.target_file }}"
          echo "Duplicates fixed: ${{ steps.analyze.outputs.total_duplicates }}"
          echo "Ready for Vercel deployment"

      - name: No Fix Needed
        if: steps.analyze.outputs.needs_fix == 'false'
        run: |
          echo "No duplicates found"
          echo "File is already clean"
          echo "User: Vishalsnw"
          echo "Target: ${{ steps.detect-file.outputs.target_file }}"
