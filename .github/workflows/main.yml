name: 🏦 StockForge Auto-Fix Duplicates

on:
  # Manual trigger button in GitHub Actions tab
  workflow_dispatch:
    inputs:
      fix_type:
        description: 'Type of fix to apply'
        required: true
        default: 'remove_duplicates'
        type: choice
        options:
          - remove_duplicates
          - update_timestamps
          - full_cleanup
      user_name:
        description: 'Target User (default: Vishalsnw)'
        required: false
        default: 'Vishalsnw'
        type: string
      
  # Auto trigger on push to main with error
  push:
    branches: [ main ]
    paths: 
      - 'frontend/src/hooks/useBotMarket.js'
      - 'src/hooks/useBotMarket.js'

  # Auto trigger on failed build
  workflow_run:
    workflows: ["Vercel Production Deployment"]
    types: [completed]
    
jobs:
  auto-fix-duplicates:
    name: 🔧 Fix Duplicate Declarations
    runs-on: ubuntu-latest
    
    steps:
      - name: 📅 Display Current Info
        run: |
          echo "🏦 STOCKFORGE AUTO-FIX WORKFLOW"
          echo "👤 User: ${{ inputs.user_name || 'Vishalsnw' }}"
          echo "📅 UTC Time: 2025-06-12 09:32:57"
          echo "🎯 Fix Type: ${{ inputs.fix_type || 'remove_duplicates' }}"
          echo "🚀 Workflow: auto-fix-duplicates"
          echo "=================================================="

      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            package-lock.json

      - name: 📦 Install Dependencies
        run: |
          if [ -f "frontend/package.json" ]; then
            cd frontend && npm ci
          elif [ -f "package.json" ]; then
            npm ci
          else
            echo "⚠️ No package.json found, skipping npm install"
          fi

      - name: 🔍 Detect Target File
        id: detect-file
        run: |
          if [ -f "frontend/src/hooks/useBotMarket.js" ]; then
            echo "target_file=frontend/src/hooks/useBotMarket.js" >> $GITHUB_OUTPUT
            echo "📍 Target: frontend/src/hooks/useBotMarket.js"
          elif [ -f "src/hooks/useBotMarket.js" ]; then
            echo "target_file=src/hooks/useBotMarket.js" >> $GITHUB_OUTPUT
            echo "📍 Target: src/hooks/useBotMarket.js"
          else
            echo "❌ ERROR: useBotMarket.js not found!"
            exit 1
          fi

      - name: 🔍 Analyze Current Duplicates
        id: analyze
        run: |
          TARGET_FILE="${{ steps.detect-file.outputs.target_file }}"
          echo "🔍 Analyzing duplicate declarations in $TARGET_FILE"
          
          if [ ! -f "$TARGET_FILE" ]; then
            echo "❌ File not found: $TARGET_FILE"
            exit 1
          fi
          
          # Count duplicates
          CURRENT_USER_COUNT=$(grep -c "const currentUser =" "$TARGET_FILE" || echo "0")
          CURRENT_DATE_TIME_COUNT=$(grep -c "const currentDateTimeUTC =" "$TARGET_FILE" || echo "0")
          CURRENT_DATE_COUNT=$(grep -c "const currentDate =" "$TARGET_FILE" || echo "0")
          CURRENT_TIME_COUNT=$(grep -c "const currentTime =" "$TARGET_FILE" || echo "0")
          
          echo "📊 DUPLICATE ANALYSIS:"
          echo "   currentUser: $CURRENT_USER_COUNT declarations"
          echo "   currentDateTimeUTC: $CURRENT_DATE_TIME_COUNT declarations"
          echo "   currentDate: $CURRENT_DATE_COUNT declarations"
          echo "   currentTime: $CURRENT_TIME_COUNT declarations"
          
          # Check if fix is needed
          TOTAL_DUPLICATES=$((CURRENT_USER_COUNT + CURRENT_DATE_TIME_COUNT + CURRENT_DATE_COUNT + CURRENT_TIME_COUNT - 4))
          echo "total_duplicates=$TOTAL_DUPLICATES" >> $GITHUB_OUTPUT
          
          if [ $TOTAL_DUPLICATES -gt 0 ]; then
            echo "needs_fix=true" >> $GITHUB_OUTPUT
            echo "🚨 $TOTAL_DUPLICATES duplicate declarations found - FIX NEEDED!"
          else
            echo "needs_fix=false" >> $GITHUB_OUTPUT
            echo "✅ No duplicates found - File is clean!"
          fi

      - name: 🔧 Create Auto-Fix Script
        if: steps.analyze.outputs.needs_fix == 'true'
        run: |
          cat > auto_fix.js << 'EOF'
          #!/usr/bin/env node
          /**
           * 🏦 STOCKFORGE - Automated Duplicate Variable Fixer
           * 🎯 Built for: Vishalsnw  
           * 📅 Created: 2025-06-12 09:32:57 UTC
           * 🚀 Auto-fixes duplicate const declarations
           */
          
          const fs = require('fs');
          
          function fixDuplicateDeclarations(filePath) {
              console.log('🤖 STOCKFORGE Auto-Fix Script Starting...');
              console.log('👤 User: Vishalsnw');
              console.log('📅 UTC Time: 2025-06-12 09:32:57');
              console.log(`🎯 Target: ${filePath}`);
              console.log('-'.repeat(60));
              
              try {
                  let content = fs.readFileSync(filePath, 'utf8');
                  console.log(`✅ File loaded: ${content.length} characters`);
                  
                  const variablesToFix = [
                      'currentUser',
                      'currentDateTimeUTC',
                      'currentDate',
                      'currentTime'
                  ];
                  
                  // Count current occurrences
                  console.log('\n🔍 Current duplicate count:');
                  variablesToFix.forEach(varName => {
                      const pattern = new RegExp(`const ${varName} =`, 'g');
                      const matches = content.match(pattern) || [];
                      console.log(`   ${varName}: ${matches.length} declarations`);
                  });
                  
                  // Remove duplicate blocks including comments
                  console.log('\n🔧 Removing duplicate declarations...');
                  
                  // Pattern to match comment + declaration blocks
                  const duplicatePattern = /\s*\/\/ ===== CURRENT INFO \(Updated\) =====\s*\n\s*const currentUser = '[^']*';\s*\n\s*const currentDateTimeUTC = '[^']*';\s*\n\s*const currentDate = '[^']*';\s*\n(?:\s*const currentTime = '[^']*';\s*\n)?/g;
                  
                  const matches = [...content.matchAll(duplicatePattern)];
                  console.log(`   Found ${matches.length} complete duplicate blocks`);
                  
                  if (matches.length > 1) {
                      // Remove all but the first occurrence
                      for (let i = matches.length - 1; i > 0; i--) {
                          const match = matches[i];
                          const start = match.index;
                          const end = start + match[0].length;
                          content = content.slice(0, start) + content.slice(end);
                          console.log(`   🗑️ Removed duplicate block ${i + 1}`);
                      }
                  }
                  
                  // Also remove any standalone duplicate declarations
                  variablesToFix.forEach(varName => {
                      const pattern = new RegExp(`\\n\\s*const ${varName} = '[^']*';`, 'g');
                      const standaloneMatches = [...content.matchAll(pattern)];
                      
                      if (standaloneMatches.length > 1) {
                          console.log(`   🗑️ Removing ${standaloneMatches.length - 1} standalone ${varName} duplicates`);
                          
                          for (let i = standaloneMatches.length - 1; i > 0; i--) {
                              const match = standaloneMatches[i];
                              const start = match.index;
                              const end = start + match[0].length;
                              content = content.slice(0, start) + content.slice(end);
                          }
                      }
                  });
                  
                  // Update the remaining declarations with current timestamp
                  console.log('\n📝 Updating timestamps to current time...');
                  
                  content = content.replace(
                      /const currentUser = '[^']*';/,
                      "const currentUser = 'Vishalsnw';"
                  );
                  
                  content = content.replace(
                      /const currentDateTimeUTC = '[^']*';/,
                      "const currentDateTimeUTC = '2025-06-12 09:32:57';"
                  );
                  
                  content = content.replace(
                      /const currentDate = '[^']*';/,
                      "const currentDate = '2025-06-12';"
                  );
                  
                  content = content.replace(
                      /const currentTime = '[^']*';/,
                      "const currentTime = '09:32:57';"
                  );
                  
                  // Write back to file
                  fs.writeFileSync(filePath, content, 'utf8');
                  console.log(`✅ File updated: ${content.length} characters`);
                  
                  // Verify fix
                  console.log('\n🔍 Verification after fix:');
                  variablesToFix.forEach(varName => {
                      const pattern = new RegExp(`const ${varName} =`, 'g');
                      const matches = content.match(pattern) || [];
                      const status = matches.length === 1 ? '✅' : '❌';
                      console.log(`   ${status} ${varName}: ${matches.length} declaration(s)`);
                  });
                  
                  console.log('\n🎉 SUCCESS! Duplicate declarations removed!');
                  console.log('📤 Ready for commit and deployment!');
                  
                  return true;
                  
              } catch (error) {
                  console.log(`❌ ERROR: ${error.message}`);
                  return false;
              }
          }
          
          // Get file path from command line argument
          const filePath = process.argv[2];
          if (!filePath) {
              console.log('❌ ERROR: Please provide file path as argument');
              process.exit(1);
          }
          
          const success = fixDuplicateDeclarations(filePath);
          process.exit(success ? 0 : 1);
          EOF
          
          chmod +x auto_fix.js
          echo "📝 Auto-fix script created successfully"

      - name: 🚀 Execute Auto-Fix
        if: steps.analyze.outputs.needs_fix == 'true'
        run: |
          TARGET_FILE="${{ steps.detect-file.outputs.target_file }}"
          echo "🚀 Executing auto-fix on $TARGET_FILE"
          
          node auto_fix.js "$TARGET_FILE"
          
          if [ $? -eq 0 ]; then
            echo "✅ Auto-fix completed successfully!"
          else
            echo "❌ Auto-fix failed!"
            exit 1
          fi

      - name: 🔍 Verify Build After Fix
        if: steps.analyze.outputs.needs_fix == 'true'
        run: |
          echo "🔍 Verifying build after fix..."
          
          if [ -f "frontend/package.json" ]; then
            cd frontend
            echo "📦 Installing dependencies..."
            npm ci
            echo "🏗️ Testing build..."
            npm run build
          elif [ -f "package.json" ]; then
            echo "📦 Installing dependencies..."
            npm ci
            echo "🏗️ Testing build..."
            npm run build
          else
            echo "⚠️ No package.json found, skipping build test"
          fi
          
          echo "✅ Build verification completed!"

      - name: 📝 Generate Fix Summary
        if: steps.analyze.outputs.needs_fix == 'true'
        id: summary
        run: |
          TARGET_FILE="${{ steps.detect-file.outputs.target_file }}"
          echo "📊 STOCKFORGE AUTO-FIX SUMMARY" > fix_summary.md
          echo "=================================" >> fix_summary.md
          echo "" >> fix_summary.md
          echo "👤 **User**: Vishalsnw" >> fix_summary.md
          echo "📅 **UTC Time**: 2025-06-12 09:32:57" >> fix_summary.md
          echo "🎯 **Target File**: $TARGET_FILE" >> fix_summary.md
          echo "🔧 **Fix Type**: ${{ inputs.fix_type || 'remove_duplicates' }}" >> fix_summary.md
          echo "📊 **Duplicates Found**: ${{ steps.analyze.outputs.total_duplicates }}" >> fix_summary.md
          echo "" >> fix_summary.md
          echo "## ✅ Fixes Applied:" >> fix_summary.md
          echo "- Removed duplicate \`const currentUser\` declarations" >> fix_summary.md
          echo "- Removed duplicate \`const currentDateTimeUTC\` declarations" >> fix_summary.md
          echo "- Removed duplicate \`const currentDate\` declarations" >> fix_summary.md
          echo "- Removed duplicate \`const currentTime\` declarations" >> fix_summary.md
          echo "- Updated timestamps to current UTC time" >> fix_summary.md
          echo "- Verified build compatibility" >> fix_summary.md
          echo "" >> fix_summary.md
          echo "## 🚀 Ready for Deployment!" >> fix_summary.md
          echo "The file is now clean and ready for Vercel deployment." >> fix_summary.md
          
          cat fix_summary.md

      - name: 💾 Commit and Push Changes
        if: steps.analyze.outputs.needs_fix == 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "StockForge Auto-Fix Bot"
          
          # Add changes
          git add .
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "ℹ️ No changes to commit"
          else
            # Create commit message
            COMMIT_MSG="🤖 Auto-fix: Remove duplicate declarations for Vishalsnw

🎯 StockForge Auto-Fix Bot Action
👤 User: Vishalsnw  
📅 UTC: 2025-06-12 09:32:57
🔧 Fixed: ${{ steps.analyze.outputs.total_duplicates }} duplicate const declarations

✅ Changes Applied:
- Removed duplicate currentUser declarations
- Removed duplicate currentDateTimeUTC declarations  
- Removed duplicate currentDate declarations
- Removed duplicate currentTime declarations
- Updated timestamps to current UTC time
- Verified build compatibility

🚀 Ready for Vercel deployment!"

            # Commit changes
            git commit -m "$COMMIT_MSG"
            
            # Push changes
            git push
            
            echo "✅ Changes committed and pushed successfully!"
            echo "📤 Repository updated with fixes"
          fi

      - name: 🎉 Success Summary
        if: steps.analyze.outputs.needs_fix == 'true'
        run: |
          echo "🎉 STOCKFORGE AUTO-FIX COMPLETED!"
          echo "================================="
          echo ""
          echo "👤 User: Vishalsnw"
          echo "📅 UTC Time: 2025-06-12 09:32:57"  
          echo "🎯 Target: ${{ steps.detect-file.outputs.target_file }}"
          echo "🔧 Duplicates Fixed: ${{ steps.analyze.outputs.total_duplicates }}"
          echo ""
          echo "✅ All duplicate const declarations removed"
          echo "✅ Timestamps updated to current time"
          echo "✅ Build verification passed"
          echo "✅ Changes committed and pushed"
          echo ""
          echo "🚀 Ready for Vercel deployment!"
          echo "📍 Check your repository for the auto-commit"

      - name: ℹ️ No Fix Needed
        if: steps.analyze.outputs.needs_fix == 'false'
        run: |
          echo "ℹ️ NO DUPLICATES FOUND"
          echo "======================"
          echo ""
          echo "👤 User: Vishalsnw"
          echo "📅 UTC Time: 2025-06-12 09:32:57"
          echo "🎯 Target: ${{ steps.detect-file.outputs.target_file }}"
          echo ""
          echo "✅ File is already clean!"
          echo "✅ No duplicate declarations found"
          echo "✅ No action required"
          echo ""
          echo "🚀 File is ready for deployment!"
